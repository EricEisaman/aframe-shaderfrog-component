{"version":3,"file":"aframe-shaderfrog-component.min.js","sources":["../../src/main.js"],"sourcesContent":["import {version} from './modules/version';\n\nvar shaders = {};\nimport Polkadot_Shader from './shaders/Polkadot_Shader.json';\nshaders['Polkadot_Shader']=Polkadot_Shader;\nimport Sun_Shader from './shaders/Sun_Shader.json';\nshaders['Sun_Shader']=Sun_Shader;\nimport Jelly_Shader from './shaders/Jelly_Shader.json';\nshaders['Jelly_Shader']=Jelly_Shader;\nimport Green_Dance_Shader from './shaders/Green_Dance_Shader.json';\nshaders['Green_Dance_Shader']=Green_Dance_Shader;\nimport Cosmic_Shader from './shaders/Cosmic_Shader.json';\nshaders['Cosmic_Shader']=Cosmic_Shader;\nimport Cool_Tiles_Shader from './shaders/Cool_Tiles_Shader.json';\nshaders['Cool_Tiles_Shader']=Cool_Tiles_Shader;\nimport Disco_Shader from './shaders/Disco_Shader.json';\nshaders['Disco_Shader']=Disco_Shader;\nimport Marching_Ants_Shader from './shaders/Marching_Ants_Shader.json';\nshaders['Marching_Ants_Shader']=Marching_Ants_Shader;\nimport Goo_Shader from './shaders/Goo_Shader.json';\nshaders['Goo_Shader']=Goo_Shader;\nimport Psycho_Shader from './shaders/Psycho_Shader.json';\nshaders['Psycho_Shader']=Psycho_Shader;\nimport Ova_Shader from './shaders/Ova_Shader.json';\nshaders['Ova_Shader']=Ova_Shader;\nimport Thruster_Shader from './shaders/Thruster_Shader.json';\nshaders['Thruster_Shader']=Thruster_Shader;\nimport Flowing_Circles_Shader from './shaders/Flowing_Circles_Shader.json';\nshaders['Flowing_Circles_Shader']=Flowing_Circles_Shader;\nimport Electric_Shader from './shaders/Electric_Shader.json';\nshaders['Electric_Shader']=Electric_Shader;\nimport CS1_Shader from './shaders/CS1_Shader.json';\nshaders['CS1_Shader']=CS1_Shader;\n\nAFRAME.shaderfrog = shaders;\n\nvar defaultThreeUniforms = [\n    'normalMatrix', 'viewMatrix', 'projectionMatrix', 'position', 'normal',\n    'modelViewMatrix', 'uv', 'uv2', 'modelMatrix'\n];\n\nfunction ShaderRuntime() {}\n\nShaderRuntime.prototype = {\n\n    mainCamera: null,\n    cubeCameras: {},\n\n    reserved: { time: null, cameraPosition: null },\n\n    umap: {\n        float: { type: 'f', value: 0 },\n        int: { type: 'i', value: 0 },\n        vec2: { type: 'v2', value() { return new THREE.Vector2(); } },\n        vec3: { type: 'v3', value() { return new THREE.Vector3(); } },\n        vec4: { type: 'v4', value() { return new THREE.Vector4(); } },\n        samplerCube: { type: 't' },\n        sampler2D: { type: 't' }\n    },\n\n    getUmap( type ) {\n        let value = this.umap[ type ].value;\n        return typeof value === 'function' ? value() : value;\n    },\n\n    registerCamera( camera ) {\n\n        if( !( camera instanceof THREE.Camera ) ) {\n            throw new Error( 'Cannot register a non-camera as a camera!' );\n        }\n\n        this.mainCamera = camera;\n\n    },\n\n    registerCubeCamera( name, camera ) {\n\n        if( !camera.renderTarget ) {\n            throw new Error( 'Cannot register a non-camera as a camera!' );\n        }\n\n        this.cubeCameras[ name ] = camera;\n\n    },\n\n    unregisterCamera( name ) {\n\n        if( name in this.cubeCameras ) {\n\n            delete this.cubeCameras[ name ];\n            \n        } else if( name === this.mainCamera ) {\n\n            delete this.mainCamera;\n\n        } else {\n\n            throw new Error( 'You never registered camera ' + name );\n\n        }\n\n    },\n\n    updateSource( identifier, config, findBy ) {\n\n        findBy = findBy || 'name';\n\n        if( !this.shaderTypes[ identifier ] ) {\n            throw new Error( 'Runtime Error: Cannot update shader ' + identifier + ' because it has not been added.' );\n        }\n\n        let newShaderData = this.add( identifier, config ),\n            shader, x;\n\n        for( x = 0; shader = this.runningShaders[ x++ ]; ) {\n            if( shader[ findBy ] === identifier ) {\n                extend( shader.material, omit( newShaderData, 'id' ) );\n                shader.material.needsUpdate = true;\n            }\n        }\n\n    },\n\n    renameShader( oldName, newName ) {\n\n        let x, shader;\n\n        if( !( oldName in this.shaderTypes ) ) {\n            throw new Error('Could not rename shader ' + oldName + ' to ' + newName + '. It does not exist.');\n        }\n\n        this.shaderTypes[ newName ] = this.shaderTypes[ oldName ];\n        delete this.shaderTypes[ oldName ];\n\n        for( x = 0; shader = this.runningShaders[ x++ ]; ) {\n            if( shader.name === oldName ) {\n                shader.name = newName;\n            }\n        }\n\n    },\n\n    get( identifier ) {\n\n        let shaderType = this.shaderTypes[ identifier ];\n\n        if( !shaderType.initted ) {\n\n            this.create( identifier );\n        }\n\n        return shaderType.material;\n\n    },\n\n    add( shaderName, config ) {\n\n        let newData = clone( config ),\n            uniform;\n        newData.fragmentShader = config.fragment;\n        newData.vertexShader = config.vertex;\n        delete newData.fragment;\n        delete newData.vertex;\n\n        for( var uniformName in newData.uniforms ) {\n            uniform = newData.uniforms[ uniformName ];\n            if( uniform.value === null ) {\n                newData.uniforms[ uniformName ].value = this.getUmap( uniform.glslType );\n            }\n        }\n        \n        if( shaderName in this.shaderTypes ) {\n            // maybe not needed? too sleepy, need document\n            extend( this.shaderTypes[ shaderName ], newData );\n        } else {\n            this.shaderTypes[ shaderName ] = newData;\n        }\n\n        return newData;\n\n    },\n\n    create( identifier ) {\n\n        let shaderType = this.shaderTypes[ identifier ];\n      \n        delete shaderType.id;\n\n        shaderType.material = new THREE.RawShaderMaterial( shaderType );\n\n        this.runningShaders.push( shaderType );\n\n        shaderType.init && shaderType.init( shaderType.material );\n        shaderType.material.needsUpdate = true;\n\n        shaderType.initted = true;\n\n        return shaderType.material;\n\n    },\n\n    updateRuntime( identifier, data, findBy ) {\n\n        findBy = findBy || 'name';\n\n        let shader, x, uniformName, uniform;\n\n        // This loop does not appear to be a slowdown culprit\n        for( x = 0; shader = this.runningShaders[ x++ ]; ) {\n            if( shader[ findBy ] === identifier ) {\n                for( uniformName in data.uniforms ) {\n\n                    if( uniformName in this.reserved ) {\n                        continue;\n                    }\n\n                    if( uniformName in shader.material.uniforms ) {\n\n                        uniform = data.uniforms[ uniformName ];\n\n                        // this is nasty, since the shader serializes\n                        // CubeCamera model to string. Maybe not update it at\n                        // all?\n                        if( uniform.type === 't' && typeof uniform.value === 'string' ) {\n                            uniform.value = this.cubeCameras[ uniform.value ].renderTarget;\n                        }\n\n                        shader.material.uniforms[ uniformName ].value = data.uniforms[ uniformName ].value;\n                    }\n                }\n            }\n        }\n\n    },\n\n    // Update global shader uniform values\n    updateShaders( time, obj ) {\n\n        let shader, x;\n\n        obj = obj || {};\n\n        for( x = 0; shader = this.runningShaders[ x++ ]; ) {\n\n            for( let uniform in obj.uniforms ) {\n                if( uniform in shader.material.uniforms ) {\n                    shader.material.uniforms[ uniform ].value = obj.uniforms[ uniform ];\n                }\n            }\n\n            if( 'cameraPosition' in shader.material.uniforms && this.mainCamera ) {\n\n                shader.material.uniforms.cameraPosition.value = this.mainCamera.position.clone();\n\n            }\n\n            if( 'viewMatrix' in shader.material.uniforms && this.mainCamera ) {\n\n                shader.material.uniforms.viewMatrix.value = this.mainCamera.matrixWorldInverse;\n\n            }\n\n            if( 'time' in shader.material.uniforms ) {\n\n                shader.material.uniforms.time.value = time;\n\n            }\n\n        }\n\n    },\n\n    shaderTypes: shaders,\n\n    runningShaders: []\n\n};\n\n// Convenience methods so we don't have to include underscore\nfunction extend() {\n    let length = arguments.length,\n        obj = arguments[ 0 ];\n\n    if( length < 2 ) {\n        return obj;\n    }\n\n    for( let index = 1; index < length; index++ ) {\n        let source = arguments[ index ],\n            keys = Object.keys( source || {} ),\n            l = keys.length;\n        for( let i = 0; i < l; i++ ) {\n            let key = keys[i];\n            obj[ key ] = source[ key ];\n        }\n    }\n\n    return obj;\n}\n\nfunction clone( obj ) {\n    return extend( {}, obj );\n}\n\nfunction omit( obj, ...keys ) {\n    let cloned = clone( obj ), x, key;\n    for( x = 0; key = keys[ x++ ]; ) {\n        delete cloned[ key ];\n    }\n    return cloned;\n}\n  \nAFRAME.registerSystem('shader-frog', {\n  init:function(){\n    this.frog_runtime = new ShaderRuntime();\n    this.clock = new THREE.Clock();\n    var self = this;\n        \n    var scene = document.querySelector('a-scene');\n    if (scene.hasLoaded) {\n      registerCamera().bind(this);;\n    } else {\n      scene.addEventListener('loaded', registerCamera);\n    }\n    function registerCamera () {\n       var camera = document.querySelector(\"a-scene\").systems[\"camera\"];\n       if(camera && camera.sceneEl && camera.sceneEl.camera){\n         camera = camera.sceneEl.camera;\n         self.frog_runtime.registerCamera(camera);\n       }\n    }\n  },\n  tick: function (t) {\n    this.frog_runtime.updateShaders( this.clock.getElapsedTime() );\n  }\n});\nAFRAME.registerComponent('shader-frog',{\n  schema:{\n    name:{type:\"string\" , default:\"Flowing_Circles_Shader\"}\n  },\n  init: function(){\n    this.originalMaterial = this.el.getObject3D('mesh').material;\n    this.shaderData = shaders[this.data.name];\n  },\n  update: function(){\n    this.system.frog_runtime.add(this.data.name,this.shaderData);\n    var material = this.system.frog_runtime.get(this.data.name);\n    this.el.getObject3D('mesh').material = material;\n  },\n  remove: function(){\n    this.el.getObject3D('mesh').material = this.originalMaterial;\n  }\n});\n  \n\n\n "],"names":["shaders","ShaderRuntime","extend","length","arguments","obj","index","source","keys","Object","l","i","key","clone","omit","x","cloned","Polkadot_Shader","Sun_Shader","Jelly_Shader","Green_Dance_Shader","Cosmic_Shader","Cool_Tiles_Shader","Disco_Shader","Marching_Ants_Shader","Goo_Shader","Psycho_Shader","Ova_Shader","Thruster_Shader","Flowing_Circles_Shader","Electric_Shader","CS1_Shader","AFRAME","shaderfrog","prototype","mainCamera","cubeCameras","reserved","time","cameraPosition","umap","float","type","value","int","vec2","THREE","Vector2","vec3","Vector3","vec4","Vector4","samplerCube","sampler2D","[object Object]","this","camera","Camera","Error","name","renderTarget","identifier","config","findBy","shaderTypes","shader","newShaderData","add","runningShaders","material","needsUpdate","oldName","newName","shaderType","initted","create","shaderName","uniform","newData","uniformName","fragmentShader","fragment","vertexShader","vertex","uniforms","getUmap","glslType","id","RawShaderMaterial","push","init","data","position","viewMatrix","matrixWorldInverse","registerSystem","frog_runtime","clock","Clock","self","scene","document","querySelector","registerCamera","systems","sceneEl","hasLoaded","bind","addEventListener","tick","t","updateShaders","getElapsedTime","registerComponent","schema","default","originalMaterial","el","getObject3D","shaderData","update","system","get","remove"],"mappings":"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"}